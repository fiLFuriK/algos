import heapq

def min_path_with_iskl(graph, start, end, iskl):
    pq = [(0, start, iskl)]
    distances = {}
    distances[(start, iskl)] = 0

    while pq:
        current_dist, current_top, lim_iskl = heapq.heappop(pq)

        if current_top == end:
            return current_dist

        if current_dist > distances.get((current_top, lim_iskl), float('inf')):
            continue

        for neighbor, weight, is_iskl in graph[current_top]:
            if is_iskl and lim_iskl > 0:
                new_dist = current_dist + weight
                new_state = (neighbor, lim_iskl - 1)
            elif not is_iskl:
                new_dist = current_dist + weight
                new_state = (neighbor, lim_iskl)
            else:
                continue

            if new_dist < distances.get(new_state, float('inf')):
                distances[new_state] = new_dist
                heapq.heappush(pq, (new_dist, neighbor, new_state[1]))

    return None

graph = {
    "A": [("B", 2, False), ("C", 4, True)],
    "B": [("A", 1, False), ("C", 2, False), ("D", 5, True)],
    "C": [("A", 3, True), ("B", 2, False), ("D", 1, False)],
    "D": [("B", 6, True), ("C", 1, False)],
    "E": [("C", 3, True), ("D", 7, True)]
}

# Тестируем функции с разными входными данными
print("Обработка результатов с ограничением:", min_path_with_iskl(graph, 'A', 'D', 1))
print("Обработка результатов без ограничений:", min_path_with_iskl(graph, 'A', 'D', 0))
print("Прямой путь с ограничениями:", min_path_with_iskl(graph, 'A', 'C', 1))
print("Прямой путь без ограничений:", min_path_with_iskl(graph, 'A', 'C', 0))
